error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:20:17
   |
20 | const _: bool = cmp::const_eq_for!(slice; [0u8], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `&u8`, found `&u16`
   |                 arguments to this method are incorrect
   |
   = note: expected reference `&u8`
              found reference `&u16`
note: method defined here
  --> src/cmp/cmp_wrapper.rs
   |
   | / std_kind_impls! {
   | |     i8, u8,
   | |     i16, u16,
   | |     i32, u32,
...  |
   | |     bool, char,
   | | }
   | |_^
   = note: this error originates in the macro `$crate::__priv_const_eq_for` which comes from the expansion of the macro `std_kind_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:21:17
   |
21 | const _: bool = cmp::const_ne_for!(slice; [0u8], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `&u8`, found `&u16`
   |                 arguments to this method are incorrect
   |
   = note: expected reference `&u8`
              found reference `&u16`
note: method defined here
  --> src/cmp/cmp_wrapper.rs
   |
   | / std_kind_impls! {
   | |     i8, u8,
   | |     i16, u16,
   | |     i32, u32,
...  |
   | |     bool, char,
   | | }
   | |_^
   = note: this error originates in the macro `$crate::__priv_const_eq_for` which comes from the expansion of the macro `std_kind_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:22:17
   |
22 | const _: Orde = cmp::const_cmp_for!(slice; [0u8], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `&u8`, found `&u16`
   |                 arguments to this method are incorrect
   |
   = note: expected reference `&u8`
              found reference `&u16`
note: method defined here
  --> src/primitive/cmp.rs
   |
   | / __declare_fns_with_docs! {
   | |     (u8, (cmp_u8))
   | |     (u16, (cmp_u16))
   | |     (u32, (cmp_u32))
...  |
   | |     macro = declare_int_cmp_fn!(),
   | | }
   | |_^
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `__declare_fns_with_docs` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:23:17
   |
23 | const _: bool = cmp::const_lt_for!(slice; [0u8], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `&u8`, found `&u16`
   |                 arguments to this method are incorrect
   |
   = note: expected reference `&u8`
              found reference `&u16`
note: method defined here
  --> src/primitive/cmp.rs
   |
   | / __declare_fns_with_docs! {
   | |     (u8, (cmp_u8))
   | |     (u16, (cmp_u16))
   | |     (u32, (cmp_u32))
...  |
   | |     macro = declare_int_cmp_fn!(),
   | | }
   | |_^
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `__declare_fns_with_docs` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:24:17
   |
24 | const _: bool = cmp::const_le_for!(slice; [0u8], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `&u8`, found `&u16`
   |                 arguments to this method are incorrect
   |
   = note: expected reference `&u8`
              found reference `&u16`
note: method defined here
  --> src/primitive/cmp.rs
   |
   | / __declare_fns_with_docs! {
   | |     (u8, (cmp_u8))
   | |     (u16, (cmp_u16))
   | |     (u32, (cmp_u32))
...  |
   | |     macro = declare_int_cmp_fn!(),
   | | }
   | |_^
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `__declare_fns_with_docs` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:25:17
   |
25 | const _: bool = cmp::const_gt_for!(slice; [0u8], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `&u8`, found `&u16`
   |                 arguments to this method are incorrect
   |
   = note: expected reference `&u8`
              found reference `&u16`
note: method defined here
  --> src/primitive/cmp.rs
   |
   | / __declare_fns_with_docs! {
   | |     (u8, (cmp_u8))
   | |     (u16, (cmp_u16))
   | |     (u32, (cmp_u32))
...  |
   | |     macro = declare_int_cmp_fn!(),
   | | }
   | |_^
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `__declare_fns_with_docs` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:26:17
   |
26 | const _: bool = cmp::const_ge_for!(slice; [0u8], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `&u8`, found `&u16`
   |                 arguments to this method are incorrect
   |
   = note: expected reference `&u8`
              found reference `&u16`
note: method defined here
  --> src/primitive/cmp.rs
   |
   | / __declare_fns_with_docs! {
   | |     (u8, (cmp_u8))
   | |     (u16, (cmp_u16))
   | |     (u32, (cmp_u32))
...  |
   | |     macro = declare_int_cmp_fn!(),
   | | }
   | |_^
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `__declare_fns_with_docs` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:28:17
   |
28 | const _: bool = cmp::const_eq_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
note: required by a bound in `__AssertConstCmp`
  --> src/cmp/const_cmp.rs
   |
   | pub struct __AssertConstCmp<'a, T: ConstCmp> {
   |                                    ^^^^^^^^ required by this bound in `__AssertConstCmp`
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_eq_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:28:17
   |
28 | const _: bool = cmp::const_eq_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
note: required by a bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
  --> src/cmp/const_cmp.rs
   |
   |     R: ?Sized + ConstCmp,
   |                 ^^^^^^^^ required by this bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
...
   |     pub const NEW: Self = Self(PhantomData);
   |               --- required by a bound in this associated constant
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_eq_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0282]: type annotations needed
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:28:17
   |
28 | const _: bool = cmp::const_eq_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type
   |
   = note: this error originates in the macro `$crate::__priv_const_eq_for` which comes from the expansion of the macro `cmp::const_eq_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:29:17
   |
29 | const _: bool = cmp::const_ne_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
note: required by a bound in `__AssertConstCmp`
  --> src/cmp/const_cmp.rs
   |
   | pub struct __AssertConstCmp<'a, T: ConstCmp> {
   |                                    ^^^^^^^^ required by this bound in `__AssertConstCmp`
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_ne_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:29:17
   |
29 | const _: bool = cmp::const_ne_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
note: required by a bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
  --> src/cmp/const_cmp.rs
   |
   |     R: ?Sized + ConstCmp,
   |                 ^^^^^^^^ required by this bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
...
   |     pub const NEW: Self = Self(PhantomData);
   |               --- required by a bound in this associated constant
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_ne_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0282]: type annotations needed
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:29:17
   |
29 | const _: bool = cmp::const_ne_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type
   |
   = note: this error originates in the macro `$crate::__priv_const_eq_for` which comes from the expansion of the macro `cmp::const_ne_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:30:17
   |
30 | const _: Orde = cmp::const_cmp_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
   = note: required for `&NotCmp` to implement `ConstCmp`
note: required by a bound in `__AssertConstCmp`
  --> src/cmp/const_cmp.rs
   |
   | pub struct __AssertConstCmp<'a, T: ConstCmp> {
   |                                    ^^^^^^^^ required by this bound in `__AssertConstCmp`
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_cmp_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:30:17
   |
30 | const _: Orde = cmp::const_cmp_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
   = note: required for `&NotCmp` to implement `ConstCmp`
note: required by a bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
  --> src/cmp/const_cmp.rs
   |
   |     R: ?Sized + ConstCmp,
   |                 ^^^^^^^^ required by this bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
...
   |     pub const NEW: Self = Self(PhantomData);
   |               --- required by a bound in this associated constant
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_cmp_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0282]: type annotations needed
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:30:17
   |
30 | const _: Orde = cmp::const_cmp_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type
   |
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `cmp::const_cmp_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:31:17
   |
31 | const _: bool = cmp::const_lt_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
   = note: required for `&NotCmp` to implement `ConstCmp`
note: required by a bound in `__AssertConstCmp`
  --> src/cmp/const_cmp.rs
   |
   | pub struct __AssertConstCmp<'a, T: ConstCmp> {
   |                                    ^^^^^^^^ required by this bound in `__AssertConstCmp`
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_lt_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:31:17
   |
31 | const _: bool = cmp::const_lt_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
   = note: required for `&NotCmp` to implement `ConstCmp`
note: required by a bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
  --> src/cmp/const_cmp.rs
   |
   |     R: ?Sized + ConstCmp,
   |                 ^^^^^^^^ required by this bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
...
   |     pub const NEW: Self = Self(PhantomData);
   |               --- required by a bound in this associated constant
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_lt_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0282]: type annotations needed
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:31:17
   |
31 | const _: bool = cmp::const_lt_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type
   |
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `cmp::const_lt_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:32:17
   |
32 | const _: bool = cmp::const_le_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
   = note: required for `&NotCmp` to implement `ConstCmp`
note: required by a bound in `__AssertConstCmp`
  --> src/cmp/const_cmp.rs
   |
   | pub struct __AssertConstCmp<'a, T: ConstCmp> {
   |                                    ^^^^^^^^ required by this bound in `__AssertConstCmp`
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_le_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:32:17
   |
32 | const _: bool = cmp::const_le_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
   = note: required for `&NotCmp` to implement `ConstCmp`
note: required by a bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
  --> src/cmp/const_cmp.rs
   |
   |     R: ?Sized + ConstCmp,
   |                 ^^^^^^^^ required by this bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
...
   |     pub const NEW: Self = Self(PhantomData);
   |               --- required by a bound in this associated constant
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_le_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0282]: type annotations needed
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:32:17
   |
32 | const _: bool = cmp::const_le_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type
   |
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `cmp::const_le_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:33:17
   |
33 | const _: bool = cmp::const_gt_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
   = note: required for `&NotCmp` to implement `ConstCmp`
note: required by a bound in `__AssertConstCmp`
  --> src/cmp/const_cmp.rs
   |
   | pub struct __AssertConstCmp<'a, T: ConstCmp> {
   |                                    ^^^^^^^^ required by this bound in `__AssertConstCmp`
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_gt_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:33:17
   |
33 | const _: bool = cmp::const_gt_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
   = note: required for `&NotCmp` to implement `ConstCmp`
note: required by a bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
  --> src/cmp/const_cmp.rs
   |
   |     R: ?Sized + ConstCmp,
   |                 ^^^^^^^^ required by this bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
...
   |     pub const NEW: Self = Self(PhantomData);
   |               --- required by a bound in this associated constant
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_gt_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0282]: type annotations needed
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:33:17
   |
33 | const _: bool = cmp::const_gt_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type
   |
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `cmp::const_gt_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:34:17
   |
34 | const _: bool = cmp::const_ge_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
   = note: required for `&NotCmp` to implement `ConstCmp`
note: required by a bound in `__AssertConstCmp`
  --> src/cmp/const_cmp.rs
   |
   | pub struct __AssertConstCmp<'a, T: ConstCmp> {
   |                                    ^^^^^^^^ required by this bound in `__AssertConstCmp`
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_ge_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotCmp: ConstCmp` is not satisfied
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:34:17
   |
34 | const _: bool = cmp::const_ge_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ConstCmp` is not implemented for `NotCmp`
   |
   = help: the following other types implement trait `ConstCmp`:
             &T
             &mut T
             BadCmp
             CmpWrapper<P>
             NonZero<i128>
             NonZero<i16>
             NonZero<i32>
             NonZero<i64>
           and $N others
   = note: required for `&NotCmp` to implement `ConstCmp`
note: required by a bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
  --> src/cmp/const_cmp.rs
   |
   |     R: ?Sized + ConstCmp,
   |                 ^^^^^^^^ required by this bound in `IsAConstCmp::<<R as ConstCmp>::Kind, <R as ConstCmp>::This, R>::NEW`
...
   |     pub const NEW: Self = Self(PhantomData);
   |               --- required by a bound in this associated constant
   = note: this error originates in the macro `$crate::cmp::coerce_to_cmp` which comes from the expansion of the macro `cmp::const_ge_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0282]: type annotations needed
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:34:17
   |
34 | const _: bool = cmp::const_ge_for!(slice; [NotCmp], [3u16]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type
   |
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `cmp::const_ge_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:36:17
   |
36 | const _: bool = cmp::const_eq_for!(slice; [BadCmp], [BadCmp]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `bool`, found `u8`
   |                 expected due to this
   |
   = note: this error originates in the macro `$crate::__priv_const_eq_for` which comes from the expansion of the macro `cmp::const_eq_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:37:17
   |
37 | const _: bool = cmp::const_ne_for!(slice; [BadCmp], [BadCmp]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `bool`, found `u8`
   |                 expected due to this
   |
   = note: this error originates in the macro `$crate::__priv_const_eq_for` which comes from the expansion of the macro `cmp::const_ne_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:38:17
   |
38 | const _: Orde = cmp::const_cmp_for!(slice; [BadCmp], [BadCmp]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `Ordering`, found `u8`
   |                 expected due to this
   |
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `cmp::const_cmp_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:39:17
   |
39 | const _: bool = cmp::const_lt_for!(slice; [BadCmp], [BadCmp]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `Ordering`, found `u8`
   |                 expected due to this
   |
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `cmp::const_lt_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:40:17
   |
40 | const _: bool = cmp::const_le_for!(slice; [BadCmp], [BadCmp]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `Ordering`, found `u8`
   |                 expected due to this
   |
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `cmp::const_le_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:41:17
   |
41 | const _: bool = cmp::const_gt_for!(slice; [BadCmp], [BadCmp]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `Ordering`, found `u8`
   |                 expected due to this
   |
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `cmp::const_gt_for` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/misc_tests/cmp_macros_ui_tests/cmp_comparison_for_macros_noncomparator_type_err.rs:42:17
   |
42 | const _: bool = cmp::const_ge_for!(slice; [BadCmp], [BadCmp]);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 expected `Ordering`, found `u8`
   |                 expected due to this
   |
   = note: this error originates in the macro `$crate::__priv_const_cmp_for` which comes from the expansion of the macro `cmp::const_ge_for` (in Nightly builds, run with -Z macro-backtrace for more info)
